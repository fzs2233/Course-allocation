{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    account: null,\n    web3: null,\n    contracts: {\n      courseAllocation: null,\n      vote: null,\n      studentVote: null,\n      teacherVote: null\n    },\n    isInitialized: false\n  },\n  getters: {\n    isConnected: state => !!state.account\n  },\n  mutations: {\n    setAccount(state, account) {\n      state.account = account;\n    },\n    setWeb3(state, web3) {\n      state.web3 = web3;\n    },\n    setContracts(state, contracts) {\n      state.contracts = contracts;\n    },\n    setInitialized(state, status) {\n      state.isInitialized = status;\n    }\n  },\n  actions: {\n    async connectWallet({\n      commit\n    }) {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          commit('setAccount', accounts[0]);\n          return accounts[0];\n        } catch (error) {\n          console.error('连接钱包失败:', error);\n          return null;\n        }\n      } else {\n        console.error('请安装MetaMask钱包');\n        return null;\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","state","account","web3","contracts","courseAllocation","vote","studentVote","teacherVote","isInitialized","getters","isConnected","mutations","setAccount","setWeb3","setContracts","setInitialized","status","actions","connectWallet","commit","window","ethereum","accounts","request","method","error","console","modules"],"sources":["E:/dao/327/Course-allocation/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\n\r\nexport default createStore({\r\n  state: {\r\n    account: null,\r\n    web3: null,\r\n    contracts: {\r\n      courseAllocation: null,\r\n      vote: null,\r\n      studentVote: null,\r\n      teacherVote: null\r\n    },\r\n    isInitialized: false\r\n  },\r\n  getters: {\r\n    isConnected: state => !!state.account\r\n  },\r\n  mutations: {\r\n    setAccount(state, account) {\r\n      state.account = account\r\n    },\r\n    setWeb3(state, web3) {\r\n      state.web3 = web3\r\n    },\r\n    setContracts(state, contracts) {\r\n      state.contracts = contracts\r\n    },\r\n    setInitialized(state, status) {\r\n      state.isInitialized = status\r\n    }\r\n  },\r\n  actions: {\r\n    async connectWallet({ commit }) {\r\n      if (window.ethereum) {\r\n        try {\r\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n          commit('setAccount', accounts[0])\r\n          return accounts[0]\r\n        } catch (error) {\r\n          console.error('连接钱包失败:', error)\r\n          return null\r\n        }\r\n      } else {\r\n        console.error('请安装MetaMask钱包')\r\n        return null\r\n      }\r\n    }\r\n  },\r\n  modules: {\r\n  }\r\n}) "],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE;IACLC,OAAO,EAAE,IAAI;IACbC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE;MACTC,gBAAgB,EAAE,IAAI;MACtBC,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE,IAAI;MACjBC,WAAW,EAAE;IACf,CAAC;IACDC,aAAa,EAAE;EACjB,CAAC;EACDC,OAAO,EAAE;IACPC,WAAW,EAAEV,KAAK,IAAI,CAAC,CAACA,KAAK,CAACC;EAChC,CAAC;EACDU,SAAS,EAAE;IACTC,UAAUA,CAACZ,KAAK,EAAEC,OAAO,EAAE;MACzBD,KAAK,CAACC,OAAO,GAAGA,OAAO;IACzB,CAAC;IACDY,OAAOA,CAACb,KAAK,EAAEE,IAAI,EAAE;MACnBF,KAAK,CAACE,IAAI,GAAGA,IAAI;IACnB,CAAC;IACDY,YAAYA,CAACd,KAAK,EAAEG,SAAS,EAAE;MAC7BH,KAAK,CAACG,SAAS,GAAGA,SAAS;IAC7B,CAAC;IACDY,cAAcA,CAACf,KAAK,EAAEgB,MAAM,EAAE;MAC5BhB,KAAK,CAACQ,aAAa,GAAGQ,MAAM;IAC9B;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC9B,IAAIC,MAAM,CAACC,QAAQ,EAAE;QACnB,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;YAAEC,MAAM,EAAE;UAAsB,CAAC,CAAC;UACjFL,MAAM,CAAC,YAAY,EAAEG,QAAQ,CAAC,CAAC,CAAC,CAAC;UACjC,OAAOA,QAAQ,CAAC,CAAC,CAAC;QACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;UAC/B,OAAO,IAAI;QACb;MACF,CAAC,MAAM;QACLC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAC;QAC9B,OAAO,IAAI;MACb;IACF;EACF,CAAC;EACDE,OAAO,EAAE,CACT;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}